<?php

namespace Tests;

use Mockery;
use App\Models\User;
use App\Authenticator\TwoFA;
use App\Authenticator\GoogleAuthenticatorProxy;
use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication;

    protected $app;

    /** @var \App\Authenticator\GoogleAuthenticatorProxy */
    protected $authenticator;


    /** @var \App\Authenticator\TwoFA */
    protected $twoFa;


    public function setUp(): void
    {
        parent::setUp();
        
        $this->twoFa = Mockery::mock(TwoFA::class);
        $this->authenticator = Mockery::mock(GoogleAuthenticatorProxy::class);
        
    }


    protected function signInWithEnabled2FA()
    {
        User::factory()->create([
            'two_fa_enabled_at' => now()->__toString(),
            'two_fa_secret' => 'user-2fa-secret', // generated by 2FA library
        ]);

        $request = [
            'email' => 'admin@email.com',
            'password' => 'password'
        ];

        return $this->json('POST', route('api.v1.post.signin'), $request);
    }

    protected function mockAuthenticator()
    {
        $this->authenticator->shouldReceive('checkCode')
                            ->with(Mockery::any(), Mockery::any())
                            ->andReturn(true);
        $this->app->bind(GoogleAuthenticatorProxy::class, function(){
            return $this->authenticator;
        });
    }
}
